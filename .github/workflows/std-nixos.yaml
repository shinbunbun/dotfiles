name: std CI/CD(NixOS)

# プッシュとPRのトリガーはそのまま残し、VMテスト用の手動トリガーを追加
on:
  push:
  pull_request:
  workflow_dispatch:
    inputs:
      run_vm_test:
        description: 'Run VM test'
        required: true
        type: boolean
        default: false

permissions:
  id-token: write
  contents: read

concurrency:
  group: std-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  discover:
    outputs:
      hits: ${{ steps.discovery.outputs.hits }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: nixbuild/nix-quick-install-action@master
      - uses: nix-community/cache-nix-action@v6
        with:
          primary-key: nix-${{ runner.os }}-${{ hashFiles('**/*.nix', '**/flake.lock') }}
          restore-prefixes-first-match: nix-${{ runner.os }}-
          gc-max-store-size-linux: 1G
          purge: true
          purge-prefixes: nix-${{ runner.os }}-
          purge-created: 0
          purge-primary-key: never
      # - uses: nixbuild/nixbuild-action@v17
      #   with:
      #     nixbuild_ssh_key: ${{ secrets.SSH_PRIVATE_KEY }}
      #     generate_summary_for: job
      - uses: divnix/std-action/discover@main
        id: discovery

  debug:
    needs: discover
    name: Debug
    runs-on: ubuntu-latest
    steps:
      - name: Debug
        run: |
          echo "discover outputs: $(echo '${{ toJSON(fromJSON(needs.discover.outputs.hits)) }}')"

  build:
    needs: discover
    name: ${{ matrix.target.jobName }}
    runs-on: ubuntu-latest
    # devshells.shells が空オブジェクト '{}' や空文字列 '' でなければジョブを実行
    if: fromJSON(needs.discover.outputs.hits).shells.build != '[]' &&
        fromJSON(needs.discover.outputs.hits).shells.build != ''
    strategy:
      matrix:
        target: ${{ fromJSON(needs.discover.outputs.hits).shells.build }}
    steps:
      - uses: actions/checkout@v3
      - uses: nixbuild/nix-quick-install-action@master
      - uses: nix-community/cache-nix-action@v6
        with:
          primary-key: nix-${{ runner.os }}-${{ hashFiles('**/*.nix', '**/flake.lock') }}
          restore-prefixes-first-match: nix-${{ runner.os }}-
          gc-max-store-size-linux: 1G
          purge: true
          purge-prefixes: nix-${{ runner.os }}-
          purge-created: 0
          purge-primary-key: never
      # - uses: nixbuild/nixbuild-action@v17
      #   with:
      #     nixbuild_ssh_key: ${{ secrets.SSH_PRIVATE_KEY }}
      #     generate_summary_for: job
      - uses: divnix/std-action/run@main
      - name: List build output files
        run: ls -la
      - name: List result directory
        run: cat copylogs

  nixos-build:
    needs: discover
    name: ${{ matrix.target.jobName }}
    runs-on: ubuntu-latest
    if: fromJSON(needs.discover.outputs.hits).nixosConfigurations.build != '{}' &&
      fromJSON(needs.discover.outputs.hits).nixosConfigurations.build != ''
    strategy:
      matrix:
        target: ${{ fromJSON(needs.discover.outputs.hits).nixosConfigurations.build }}
    steps:
      - uses: actions/checkout@v3
      - uses: nixbuild/nix-quick-install-action@master
      - uses: nix-community/cache-nix-action@v6
        with:
          primary-key: nix-${{ runner.os }}-${{ hashFiles('**/*.nix', '**/flake.lock') }}
          restore-prefixes-first-match: nix-${{ runner.os }}-
          gc-max-store-size-linux: 1G
          purge: true
          purge-prefixes: nix-${{ runner.os }}-
          purge-created: 0
          purge-primary-key: never

      # Setup SOPS key
      - name: Setup SOPS
        run: |
          sudo mkdir -p /var/lib/sops-nix
          echo "${{ secrets.SOPS_AGE_KEY }}" | sudo tee /var/lib/sops-nix/key.txt > /dev/null
          sudo chmod 600 /var/lib/sops-nix/key.txt

      # Install required packages
      - name: Install required packages
        run: |
          nix-env -iA nixpkgs.nixos-rebuild

      # 基本的なビルドチェック
      - uses: divnix/std-action/run@main
      - name: List build output files
        run: ls -la
      - name: Query build output path and execute
        run: |
          out=$(nix derivation show "$actionDrv^out" | jq -r '.[].outputs.out.path')
          echo "The build output is at: $out"
          chmod +x "$out"
          "$out"

  nixos-vm-test:
    needs: [discover, nixos-build]
    name: NixOS VM Test
    runs-on: ubuntu-latest
    if: >
      github.event_name == 'workflow_dispatch' &&
      github.event.inputs.run_vm_test == 'true' &&
      fromJSON(needs.discover.outputs.hits).nixosConfigurations.build-vm-with-bootloader != '{}' &&
      fromJSON(needs.discover.outputs.hits).nixosConfigurations.build-vm-with-bootloader != ''
    strategy:
      matrix:
        target: ${{ fromJSON(needs.discover.outputs.hits).nixosConfigurations.build-vm-with-bootloader }}
    steps:
      - uses: actions/checkout@v3
      - uses: nixbuild/nix-quick-install-action@master
      - uses: nix-community/cache-nix-action@v6
        with:
          primary-key: nix-${{ runner.os }}-${{ hashFiles('**/*.nix', '**/flake.lock') }}
          restore-prefixes-first-match: nix-${{ runner.os }}-
          gc-max-store-size-linux: 1G
          purge: true
          purge-prefixes: nix-${{ runner.os }}-
          purge-created: 0
          purge-primary-key: never

      # VMビルドとテスト
      - name: Setup KVM
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu-kvm libvirt-daemon-system libvirt-clients bridge-utils
          sudo modprobe kvm
          sudo modprobe kvm_intel || sudo modprobe kvm_amd
          sudo chown $USER /dev/kvm

      - name: Build and test VM
        run: |
          nix build .#nixosConfigurations.nixos.config.system.build.vm
          timeout 300 ./result/bin/run-nixos-vm -nographic || {
            if [ $? -eq 124 ]; then
              echo "VM test completed (timeout after 5 minutes)"
              exit 0
            else
              echo "VM test failed"
              exit 1
            fi
          }

      - name: List build output files
        run: ls -la
