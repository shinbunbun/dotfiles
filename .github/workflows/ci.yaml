name: Nix CI
on:
  push:
    branches: [ main, feature/* ]
  pull_request:
    branches: [ main ]

jobs:
  format-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Nix with flakes enabled
        uses: cachix/install-nix-action@v31
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes
      - name: Check Nix code formatting
        run: nix fmt -- --check
      
  build-nixos:
    needs: format-check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        configuration: [homeMachine]
    steps:
      - uses: actions/checkout@v4
      - name: Install Nix with flakes enabled
        uses: cachix/install-nix-action@v31
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes
      - uses: nix-community/cache-nix-action@v6
        with:
          primary-key: nix-${{ runner.os }}-${{ hashFiles('**/*.nix', '**/flake.lock') }}
          restore-prefixes-first-match: nix-${{ runner.os }}-
          gc-max-store-size-linux: 2G
          purge: true
          purge-prefixes: nix-${{ runner.os }}-
          purge-created: 0
          purge-primary-key: never
      - name: Build NixOS configuration
        run: |
          nix build .#nixosConfigurations.${{ matrix.configuration }}.config.system.build.toplevel \
            --print-build-logs \
            --show-trace
            
  build-darwin:
    needs: format-check
    runs-on: macos-latest
    strategy:
      matrix:
        configuration: [macbook]
    steps:
      - uses: actions/checkout@v4
      - name: Install Nix with flakes enabled
        uses: cachix/install-nix-action@v31
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes
      - uses: nix-community/cache-nix-action@v6
        with:
          primary-key: nix-${{ runner.os }}-${{ hashFiles('**/*.nix', '**/flake.lock') }}
          restore-prefixes-first-match: nix-${{ runner.os }}-
          gc-max-store-size-linux: 2G
          purge: true
          purge-prefixes: nix-${{ runner.os }}-
          purge-created: 0
          purge-primary-key: never
      - name: Build Darwin configuration
        run: |
          nix build .#darwinConfigurations.${{ matrix.configuration }}.config.system.build.toplevel \
            --print-build-logs \
            --show-trace
            
  build-devshell:
    needs: format-check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Nix with flakes enabled
        uses: cachix/install-nix-action@v31
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes
      - uses: nix-community/cache-nix-action@v6
        with:
          primary-key: nix-${{ runner.os }}-${{ hashFiles('**/*.nix', '**/flake.lock') }}
          restore-prefixes-first-match: nix-${{ runner.os }}-
          gc-max-store-size-linux: 2G
          purge: true
          purge-prefixes: nix-${{ runner.os }}-
          purge-created: 0
          purge-primary-key: never
      - name: Build development shell
        run: |
          nix build .#devShells.x86_64-linux.default \
            --print-build-logs \
            --show-trace
      - name: Check flake
        run: nix flake check --print-build-logs